from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding

def generate_keys():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()

    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )

    public_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    return private_pem, public_pem

def encrypt(public_key_pem, plain_text):
    public_key = serialization.load_pem_public_key(public_key_pem, backend=default_backend())
    cipher_text = public_key.encrypt(
        plain_text.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return cipher_text

def decrypt(private_key_pem, cipher_text):
    private_key = serialization.load_pem_private_key(private_key_pem, password=None, backend=default_backend())
    plain_text = private_key.decrypt(
        cipher_text,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return plain_text.decode()

if __name__ == "__main__":
    private_key_pem, public_key_pem = generate_keys()

    # Example usage
    original_text = "Hello, RSA encryption!"
    print(f"Original text: {original_text}")

    cipher_text = encrypt(public_key_pem, original_text)
    print(f"Cipher text: {cipher_text}")

    decrypted_text = decrypt(private_key_pem, cipher_text)
    print(f"Decrypted text: {decrypted_text}")
